<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Mapperとxmlのマッピング -->
<mapper namespace="com.example.repository.UserMapper"><!-- mapperタグの namespaceにマッピングしたいインターフェース名を指定する-->

  <!-- マッピング定義(ユーザー) -->
  <resultMap type="com.example.domain.user.model.MUser" id="user"> <!-- resultMapタグでselect結果とJavaクラスをマッピングする。type属性にはパッケージ名＋クラス名を指定。id属性には任意の値を入れる -->
    <id column="user_id" property="userId" /><!-- idタグの値の数だけ戻り値のListにデータが入る -->
    <result column="password" property="password" /><!-- columnはselect結果のカラム名、 propertyにJavaクラスのフィールド名を指定する -->
    <result column="user_name" property="userName" />
    <result column="birthday" property="birthday" />
    <result column="age" property="age" />
    <result column="gender" property="gender" />
    <result column="department_id" property="departmentId" />
    <result column="role" property="role" />
    <association property="department" resultMap="department"/>
    <collection property="salaryList" resultMap="salary" columnPrefix="salary_"/>
  </resultMap>

  <!-- マッピング定義(部署) -->
  <resultMap type="com.example.domain.user.model.Department" id="department">
    <id column="department_id" property="departmentId" />
    <result column="department_name" property="departmentName" />
  </resultMap>

  <!-- マッピング定義(給料) -->
  <resultMap type="com.example.domain.user.model.Salary" id="salary">
    <id column="user_id" property="userId" />
    <id column="year_month" property="yearMonth" />
    <result column="salary" property="salary" />
  </resultMap>

  <!-- ユーザー1件登録 -->
  <insert id="insertOne"><!-- insert idにMapperのメソッド名を指定するとSQL文がマッピングされる -->
    insert into m_user(
        user_id
      , password
      , user_name
      , birthday
      , age
      , gender
      , department_id
      , role
    )
    values (
        #{userId}
      , #{password}
      , #{userName}
      , #{birthday}
      , #{age}
      , #{gender}
      , #{departmentId}
      , #{role}
    )
  </insert>

  <!-- ユーザー複数件取得 -->
  <select id="findMany" resultType="MUser"><!-- select文を書くときはselectタグを使用する。resultType属性には戻り値のデータ型を指定する -->
    select
      *
    from
      m_user
    <where>
      <if test="userId != null"><!-- ifタグはif文と使い方は一緒。条件式がtureならifタグの中のSQL文が追加される -->
        user_id like '%' || #{userId} || '%' <!-- likeは曖昧検索をする際に使う。この場合0文字以上の任意の文字列+userid+0文字以上の任意の文字列の条件に当てはまるものを検索している-->
      </if>
      <if test="userName != null">
        and user_name like '%' || #{userName} || '%'
      </if>
    </where>
  </select>

  <!-- ユーザー1件検索 -->
  <select id="findOne" resultMap="user"><!-- マッピング定義したものはresultMapの属性にid名を指定すれば使える -->
    select
        m_user.user_id
      , m_user.password
      , m_user.user_name
      , m_user.birthday
      , m_user.age
      , m_user.gender
      , m_department.department_id
      , m_department.department_name
      , t_salary.user_id as salary_user_id
      , t_salary.year_month as salary_year_month
      , t_salary.salary as salary_salary
    from
      m_user
      left join m_department
        on m_user.department_id = m_department.department_id
      left join t_salary
        on m_user.user_id = t_salary.user_id
    where
      m_user.user_id = #{userId}
  </select>

  <!-- ユーザー1件更新 -->
  <update id="updateOne">
    update
      m_user
    set
        password = #{password}
      , user_name = #{userName}
    where
      user_id = #{userId}
  </update>

  <!-- ユーザー1件削除 -->
  <delete id="deleteOne">
    delete from
      m_user
    where
      user_id = #{userId}
  </delete>

  <!-- ログインユーザー情報取得 -->
  <select id="findLoginUser" resultType="MUser">
    select
      *
    from
      m_user
    where
      user_id = #{userId}
  </select>
</mapper>